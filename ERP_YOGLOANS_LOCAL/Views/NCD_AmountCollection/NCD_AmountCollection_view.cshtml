@model System.Data.DataTable

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="~/Content/input_styles.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <script src="~/Scripts/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"> <!-- Ensure Font Awesome is included -->

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.0.0/pdf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <style>


        #cus_detailsDataGrid {
            overflow-y: auto;
            font-size: 14px;
            width: 90%;
            font-weight: 500;
            border-collapse: collapse;
        }

        #added_row_table {
            overflow-y: auto;
            font-size: 12px;
            width: 90%;
            font-weight: 500;
            border-collapse: collapse;
        }

        #selectedRowTable {
            overflow-y: auto;
            font-size: 14px;
            width: 100%;
            font-weight: 500;
            border-collapse: collapse;
        }

        #cus_detailsDataGrid th, #cus_detailsDataGrid td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: center;
        }

        #added_row_table th, #added_row_table td {
            border: 1px solid #ccc;
            padding: 1px;
            text-align: center;
        }
        /* Styling for table header */
        #added_row_table th {
            background-color: #4D759A;
            color: white;
        }

        #cus_detailsDataGrid th {
            background-color: #4D759A;
            color: white;
        }

        #selectedRowTable th, #selectedRowTable td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: center;
        }

        /* Styling for table header */
        #selectedRowTable th {
            background-color: #4D759A;
            color: white;
        }

        /* Style for the selected row table */
        #selectedRowTable {
            margin-top: 20px;
            border: 1px solid #ccc;
            border-collapse: collapse;
            width: 100%;
        }

            #selectedRowTable th, #selectedRowTable td {
                border: 1px solid #ccc;
                padding: 8px;
                text-align: center;
            }
    </style>
</head>
<body>

    <div id="mediaModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; padding-top: 50px; background-color: rgba(0,0,0,0); z-index: 1000;">
        <div id="mediaModalContent" style="position: relative; cursor: move; margin: auto; padding: 40px; width: 60%; height: 90%; ">
            <div id="pdfViewer" style="width: 100%; cursor: move; height: calc(100% - 40px);"></div>

            @*Zoom Controls*@
            <div id="zoomControls" style="text-align:center;">

                <button id="zoomIn" style="margin-right: 10px; background:transparent; border:none; font-size:24px; cursor:pointer;">
                    <i class="fas fa-search-plus"></i>
                </button>

                <!-- Zoom Out button with icon -->
                <button id="zoomOut" style="background:transparent; border:none; font-size:24px; cursor:pointer;">
                    <i class="fas fa-search-minus"></i>
                </button>
                <!-- Rotate button with icon -->
                <button id="rotateImage" style="background:transparent; border:none; font-size:24px; cursor:pointer;">
                    <i class="fas fa-sync-alt"></i>
                </button>
            </div>


            <button onclick="closeModal()" style="position:absolute; top:10px; right:10px; background:transparent; border:none; font-size:24px; cursor:pointer;">
                <i class="fas fa-times"></i>
            </button>
            @*</div>*@
        </div>
    </div>




    <div class="app-main__inner" style="margin-top: -30px;padding:0px;width:100%;">
        <div style="height: 40px; display: flex; align-items: center; justify-content: center;">
            <div class="card-title">
                <h6 style="font-weight: bold; font-size: 25px; margin: 0;color:maroon">NCD Amount Collection</h6>
            </div>
        </div>
        <div class="card-body">
            <!-- Original Data Grid Table -->
            <div style="overflow-x:auto; max-height: 500px;">
                <table id="cus_detailsDataGrid" class="table table-hover table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>Select</th> <!-- Selection column header -->
                            @if (ViewBag.CustomerBankDetails != null && ViewBag.CustomerBankDetails.Columns.Count > 0)
                            {
                                foreach (System.Data.DataColumn column in ViewBag.CustomerBankDetails.Columns)
                                {
                                    <th>@column.ColumnName</th>
                                }
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @if (ViewBag.CustomerBankDetails != null && ViewBag.CustomerBankDetails.Rows.Count > 0)
                        {
                            foreach (System.Data.DataRow row in ViewBag.CustomerBankDetails.Rows)
                            {
                                <tr>
                                    <td>
                                        <input type="checkbox" name="selectedRow" class="select-checkbox" value="@row[0]" /> <!-- Checkbox for selecting the row -->
                                    </td>
                                    @foreach (var item in row.ItemArray)
                                    {
                                        <td>@item</td>
                                    }
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6">No data available</td> <!-- Updated colspan to account for the selection column -->
                            </tr>
                        }
                    </tbody>
                </table>
            </div>


            <div style="overflow-x:auto; max-height: 400px;" id="selectedRowContainer">

                <table id="selectedRowTable" class="table table-hover table-striped table-bordered">
                    <thead>
                        <tr>
                            <!-- Dynamically fill the column headers -->
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <!-- Dynamically fill the row data -->
                        </tr>
                    </tbody>
                </table>
            </div>
            <form id="form1" action="#">
                <div class="row" id="textbox_div1" style="display:none;">
                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="txtCustomerName" name="txtCustomerName" required readonly />
                            <label for="pincode">Customer Name</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="txtpayeeName" name="txtpayeeName" required />
                            <label for="pincode">Payee Name</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <select name="paymode_texBox" id="paymode_texBox" class="form-control" required>
                            </select>
                            <label for="loan-type">Pay Mode</label>
                        </div>
                    </div>

                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="txt_ifsc" name="txt_ifsc" required onchange="handlePincodeChange()" oninput="validateIFSC(this)" />
                            <label for="pincode">Bank IFSC Code</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="bankName_txtbox" name="bankName_txtbox" required readonly />
                            <label for="pincode">Bank Name</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="branchName_txtbox" name="branchName_txtbox" required readonly />
                            <label for="pincode">Bank Branch</label>
                        </div>
                    </div>

                </div>
                <div class="row" id="textbox_div2" style="display:none;">
                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="Referance_textbox" name="Referance_textbox" required oninput="allowOnlyNumbers(this)" />
                            <label for="pincode">Referance No</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="amount_txtbox" name="amount_txtbox" required oninput="allowOnlyNumbers(this)" />
                            <label for="pincode">Amount</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="date" id="Cheque_transDate" name="Cheque_transDate" oninput="validateDOB(this.value)" required />
                            <label for="dob" id="dob-label">Cheq/Transfer Date</label>
                            <span id="dob-error" style="color: red; font-size:small;"></span>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="acc_no_textbox" name="acc_no_textbox" required oninput="allowOnlyNumbers(this)" />
                            <label for="pincode">Account No</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-2">
                        <div class="input-container" style="position: relative;">

                            <input type="file" id="Bankattach1" name="Bankattach1" style="display: none;" />


                            <button style="width:137px;" class="mb-2 mr-2 btn-icon btn-shadow btn-outline-2x btn btn-outline-info" onclick="openFileInput(event)"><i class="lnr-paperclip btn-icon-wrapper"> </i>Attachment</button>
                        </div>
                    </div>
                    <input type="hidden" id="hidden_bank_id" />
                </div>

                <div class="row" id="AddBtn_div" style="display:none;">
                    <div class="col-md-6 col-lg-4">
                        <div class="input-group mb-3">

                        </div>
                    </div>


                    <div class="col-md-6 col-lg-4">
                        <div class="input-group mb-3">
                            <button type="submit" class="mb-2 mr-2 btn btn-primary btn-sm btn-block">Add</button>
                        </div>

                    </div>

                    <div class="col-md-6 col-lg-4">
                        <div class="input-group mb-3">
                        </div>

                    </div>
                </div>
            </form>
            <div style="overflow-x:auto; max-height: 150px;display:none;" id="added_row_table_div">

                <table id="added_row_table" class="table table-hover table-striped table-bordered">
                    <thead>
                        <tr>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <!-- Dynamically fill the row data -->
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="card-body" id="total_div" style="display:none;">
                <div class="row">
                    <div class="col-lg-6 col-xl-4" style="height:50px;">
                        <div class="card mb-3 widget-content" style="height:50px;">
                            <div class="widget-content-wrapper" style="height:50px;">
                                <div class="widget-content-left">
                                    <div style="font-size:14px;" class="widget-heading">Total Amount</div>
                                </div>
                                <div class="widget-content-right">
                                    <div class="widget-numbers text-primary">
                                        <span id="totalAmountTextbox" style="font-size:20px;"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="col-lg-4">
                        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
                        &nbsp; &nbsp; &nbsp;

                        <button style="height:50px;" class="mb-2 mr-2 btn-hover-shine btn btn-success" onclick="handleSubmit()">Submit</button>

                    </div>
                    <div class="col-lg-4">

                        <button style="height:50px;" class="mb-2 mr-2 btn-hover-shine btn btn-secondary" onclick="location.reload();">Cancel</button>
                    </div>

                </div>
            </div>

        </div>
    </div>



    <script>
        function callAddBtnClick(applicationId) {
            alert("appid:"+applicationId);
            $.ajax({
                url: '/NCD_AmountCollection/Add_Btn_click_grid_fill_ready', // Replace 'ControllerName' with the actual controller name
                type: 'POST',
                data: {
                    applicationId: applicationId
                },
                success: function (response) {
                    if (response.success) {

                        $("#added_row_table_div").show();

                        // Empty the table body and header to avoid appending duplicate rows
                        $("#added_row_table tbody").empty();
                        $("#added_row_table thead tr").empty(); // Clear existing headers
                        alert("ready grid success");
                        // Create table headers dynamically
                        response.headers.forEach(function (header) {
                            let th = `<th>${header}</th>`; // Create a header cell for each header
                            $("#added_row_table thead tr").append(th);
                        });
                        //alert(1);

                        // Add extra header for actions
                        $("#added_row_table thead tr").append("<th>Actions</th>");

                        // Loop through the data to dynamically add rows
                        response.data.forEach(function (item) {
                            let row = '<tr>';
                            for (const key in item) {
                                row += `<td>${item[key]}</td>`; // Create a table cell for each item property
                            }
                            let fifthData = item[response.headers[9]];

                            // Add the actions cell with icons
                            row += `
        <td>
            <div class="button-container" style="display: flex; align-items: center;">
                <button id="delete-btn" class="mb-2 mr-2 btn-icon btn-icon-only btn-shadow btn-outline-2x btn btn-outline-danger" data-fifth-data="${fifthData}">
                    <i class="pe-7s-trash btn-icon-wrapper"></i>
                </button>
               <button  Id="imgeShow-btn" class="mb-2 mr-2 btn-icon btn-icon-only btn-shadow btn-outline-2x btn btn-outline-info" data-fifth-data="${fifthData}">
                 <i class="lnr-picture btn-icon-wrapper"></i>
             </button>
            </div>
        </td>
    `;
                            row += '</tr>';
                            $("#added_row_table tbody").append(row);
                        });

                        // Show the table div after data is added
                        $("#added_row_table_div").show();

                        updateTotalAmount();
                        $("#total_div").show();
                    } else {
                       // alert("Error: " + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("An error occurred: ", error);
                }


            });
                        $(document).on('click', '#delete-btn', function () {

                            alert("delete");
        let fifthDataValue = $(this).data("fifth-data");
       // alert("Fifth Data Value: " + fifthDataValue); // Log the value

        // AJAX request to delete the item
               $.ajax({
            url: '@Url.Action("row_delete_click", "NCD_AmountCollection")',
            type: 'POST',
            data: JSON.stringify({ track_id: fifthDataValue }), // Send the 5th data value in the request body
            contentType: 'application/json',
            success: function (deleteResponse) {
                if (deleteResponse.success) {
                    // If delete is successful, remove the row from the table
                  //  alert("Data deleted!");
                    $("#added_row_table_div").show();

                    // Empty the table body and header to avoid appending duplicate rows
                    $("#added_row_table tbody").empty();
                    $("#added_row_table thead tr").empty(); // Clear existing headers

                    // Create table headers dynamically
                    deleteResponse.headers.forEach(function (header) {
                        let th = `<th>${header}</th>`; // Create a header cell for each header
                        $("#added_row_table thead tr").append(th);
                    });
                    //alert(1);

                    // Add extra header for actions
                    $("#added_row_table thead tr").append("<th>Actions</th>");

                    // Loop through the data to dynamically add rows
                    deleteResponse.data.forEach(function (item) {
                        let row = '<tr>';
                        for (const key in item) {
                            row += `<td>${item[key]}</td>`; // Create a table cell for each item property
                        }
                        let fifthData = item[deleteResponse.headers[9]];

                        // Add the actions cell with icons
                        row += `
                            <td>
                                <div class="button-container" style="display: flex; align-items: center;">
                                    <button id="delete-btn" class="mb-2 mr-2 btn-icon btn-icon-only btn-shadow btn-outline-2x btn btn-outline-danger" data-fifth-data="${fifthData}">
                                        <i class="pe-7s-trash btn-icon-wrapper"></i>
                                    </button>
                                   <button  Id="imgeShow-btn" class="mb-2 mr-2 btn-icon btn-icon-only btn-shadow btn-outline-2x btn btn-outline-info" data-fifth-data="${fifthData}">
                                     <i class="lnr-picture btn-icon-wrapper"></i>
                                 </button>
                                </div>
                            </td>
                        `;
                        row += '</tr>';
                        $("#added_row_table tbody").append(row);
                    });

                    // Show the table div after data is added
                    $("#added_row_table_div").show();

                    updateTotalAmount();

                } else {
                    alert("Failed to delete the row: " + deleteResponse.message);
                }
            },
            error: function () {
                alert("Error occurred while deleting the row.");
            }
        });

    });

            $(document).on('click', '#imgeShow-btn', function () {
               alert("img icon click");

                let fifthDataValue = $(this).data("fifth-data");
               // alert(fifthDataValue);

    // AJAX request to delete the item
           $.ajax({
        url: '@Url.Action("popup_click", "NCD_AmountCollection")',
        type: 'POST',
        data: JSON.stringify({ track_id: fifthDataValue }), // Send the 5th data value in the request body
        contentType: 'application/json',
               success: function (response) {
                   if (response.sucess === false) {
                       // If the server indicates failure, alert the failure message
                       alert(response.message);
                   } else {
                       // If successful, alert the success message and data (e.g., image URL)
                       // alert('Success! Image URL: ' + response.data);
                       var getImageValue = response.data;
                       // alert(getImageValue);

                       if (getImageValue != null) {
                           if (getImageValue.startsWith("data:image")) {
                               //  alert("image");
                               displayPhoto(getImageValue, 'image');
                           } else if (getImageValue.startsWith("data:application/pdf")) {
                               //   alert("pdf");
                               displayPhoto(getImageValue, 'pdf');
                           } else {
                               alert("Unknown file type");
                           }
                       } else {
                           alert("No image URL received");
                       }
                   }
               },
        error: function () {
            alert("Error occurred while deleting the row.");
        }
    });

            });

            function updateTotalAmount() {
                // alert("total calculate");
                let total = 0;
                $('#added_row_table tbody tr').each(function () {
                    // Get the amount from the 6th cell (index 5) of each row
                    const amount = parseFloat($(this).find('td:eq(1)').text().trim());
                    // alert(amount);
                    if (!isNaN(amount)) {
                        total += amount;
                    }
                });
                // Update the total amount in the span
                // alert(total);
                $('#totalAmountTextbox').text(total.toFixed(2)); // Display with 2 decimal places
            }


        }


    function validateIFSC(input) {
        // Remove any character that is not a letter or digit
        input.value = input.value.replace(/[^A-Za-z0-9]/g, '');
        // Convert the input to uppercase
        input.value = input.value.toUpperCase();
    }


    function allowOnlyNumbers(input) {
        // Remove any non-digit characters
        input.value = input.value.replace(/\D/g, '');
    }


    $(document).ready(function () {
        $('#form1').on('submit', function (event)
        {
            //alert("form on submit");
            var selectElement = $('#paymode_texBox');
            var selectedValue = selectElement.val();
            var table = document.getElementById("selectedRowTable");

            var cellValue = parseFloat(table.rows[1].cells[6].innerText.trim());

            // Convert amount to a number
            var amount = parseFloat($('#amount_txtbox').val().trim());
            var bankAttachInput = document.getElementById("Bankattach1");

              if (selectedValue === "" || selectedValue === '0') {
                alert("Please select a Pay Mode.");
                $("#paymode_texBox").focus();
                event.preventDefault(); // Prevent form submission
            }
              else if (bankAttachInput.files.length === 0) {
                alert("Please select any Attachment!");
                event.preventDefault();
            }


            else if (cellValue < amount)
            {
                alert("Debenture amount is lessthan Deposit Amount");
                event.preventDefault();
            }
            else
            {
                var table = document.getElementById("selectedRowTable");


                  var application_id = parseFloat(table.rows[1].cells[0].innerText.trim());

                var amount = $('#amount_txtbox').val();
                var paymode = $('#paymode_texBox').val();
                var payee_name = $('#txtpayeeName').val();
                var bankName = $('#bankName_txtbox').val();
                var branchName = $('#branchName_txtbox').val();
                var AccountNo = $('#acc_no_textbox').val();
                var cheque_transDate = $('#Cheque_transDate').val();
                var formattedDate = formatDate(cheque_transDate);
                var Referance_textbox = $('#Referance_textbox').val();
                var bank_hid_id = $('#hidden_bank_id').val();
                var bankAttachInput = document.getElementById("Bankattach1");

                  // Create a FormData object
                  var formData = new FormData();

                  // Add text data to FormData
                  formData.append('application_id', parseFloat(table.rows[1].cells[0].innerText.trim()));
                  formData.append('paymode', $('#paymode_texBox').val());
                  formData.append('payee_name', $('#txtpayeeName').val());
                  formData.append('bankName', $('#bankName_txtbox').val());
                  formData.append('branchName', $('#branchName_txtbox').val());
                  formData.append('AccountNo', $('#acc_no_textbox').val());
                  formData.append('amount', $('#amount_txtbox').val());
                  formData.append('cheque_transDate', formatDate($('#Cheque_transDate').val()));
                  formData.append('Referance_textbox', $('#Referance_textbox').val());
                  formData.append('bank_hid_id', $('#hidden_bank_id').val());

                  // Add file data to FormData
                  var bankAttachInput = document.getElementById("Bankattach1");
                  if (bankAttachInput.files.length > 0) {
                      formData.append('bank_attachment', bankAttachInput.files[0]);
                  }

                  $.ajax({

                      url: '@Url.Action("Add_Btn_click", "NCD_AmountCollection")',
                      type: 'POST',
                      data: formData,
                      processData: false,  // Important: Prevents jQuery from processing the FormData
                      contentType: false,  // Important: Prevents jQuery from setting contentType
                      success: function (response) {
                          if (response.success) {
                             // alert("Data successfully submitted!");

                              // Empty the table body and header to avoid appending duplicate rows
                              $("#added_row_table tbody").empty();
                              $("#added_row_table thead tr").empty(); // Clear existing headers

                              // Create table headers dynamically
                              response.headers.forEach(function (header) {
                                  let th = `<th>${header}</th>`;  // Create a header cell for each header
                                  $("#added_row_table thead tr").append(th);
                              });

                              // Add extra header for actions
                              $("#added_row_table thead tr").append("<th>Actions</th>");

                              // Loop through the data to dynamically add rows
                              response.data.forEach(function (item) {
                                  let row = '<tr>';
                                  for (const key in item) {
                                      row += `<td>${item[key]}</td>`;  // Create a table cell for each item property
                                  }
                                  let fifthData = item[response.headers[9]];
                                  // Add the actions cell with icons
                                  row += `
                         <td>
                               <div class="button-container" style="display: flex; align-items: center;">
                                    <button Id="delete-btn" class="mb-2 mr-2 btn-icon btn-icon-only btn-shadow btn-outline-2x btn btn-outline-danger" data-fifth-data="${fifthData}">
                                        <i class="pe-7s-trash btn-icon-wrapper"></i>
                                    </button>

                                    <button  Id="imgeShow-btn" class="mb-2 mr-2 btn-icon btn-icon-only btn-shadow btn-outline-2x btn btn-outline-info" data-fifth-data="${fifthData}">
                                        <i class="lnr-picture btn-icon-wrapper"></i>
                                    </button>
                                </div>
                        </td>
                             `;

                                  row += '</tr>';
                                  $("#added_row_table tbody").append(row);
                              });

                              // Show the table div after data is added
                              $("#added_row_table_div").show();

                              updateTotalAmount();




                          } else {
                              alert(response.message);
                          }
                      }

                     ,
                      error: function (xhr, status, error) {
                          console.error('Error:', error);
                          // Handle any errors here (e.g., display an error message)
                      }
                  });


                  document.getElementById("Bankattach1").value = "";

                  $('#acc_no_textbox').val('');
                  $('#txtpayeeName').val('');
                $('#paymode_texBox').val('0');
                $('#txt_ifsc').val('');
                $('#bankName_txtbox').val('');
                $('#branchName_txtbox').val('');
                $('#Referance_textbox').val('');
                $('#amount_txtbox').val('');
                $('#Cheque_transDate').val('');
                $('#hidden_bank_id').val('');
                $("#total_div").show();

                event.preventDefault();

            }
            $(document).on('click', '#delete-btn', function () {


        let fifthDataValue = $(this).data("fifth-data");
       // alert("Fifth Data Value: " + fifthDataValue); // Log the value

        // AJAX request to delete the item
               $.ajax({
            url: '@Url.Action("row_delete_click", "NCD_AmountCollection")',
            type: 'POST',
            data: JSON.stringify({ track_id: fifthDataValue }), // Send the 5th data value in the request body
            contentType: 'application/json',
            success: function (deleteResponse) {
                if (deleteResponse.success) {
                    // If delete is successful, remove the row from the table
                  //  alert("Data deleted!");
                    $("#added_row_table_div").show();

                    // Empty the table body and header to avoid appending duplicate rows
                    $("#added_row_table tbody").empty();
                    $("#added_row_table thead tr").empty(); // Clear existing headers

                    // Create table headers dynamically
                    deleteResponse.headers.forEach(function (header) {
                        let th = `<th>${header}</th>`; // Create a header cell for each header
                        $("#added_row_table thead tr").append(th);
                    });
                    //alert(1);

                    // Add extra header for actions
                    $("#added_row_table thead tr").append("<th>Actions</th>");

                    // Loop through the data to dynamically add rows
                    deleteResponse.data.forEach(function (item) {
                        let row = '<tr>';
                        for (const key in item) {
                            row += `<td>${item[key]}</td>`; // Create a table cell for each item property
                        }
                        let fifthData = item[deleteResponse.headers[9]];

                        // Add the actions cell with icons
                        row += `
                            <td>
                                <div class="button-container" style="display: flex; align-items: center;">
                                    <button id="delete-btn" class="mb-2 mr-2 btn-icon btn-icon-only btn-shadow btn-outline-2x btn btn-outline-danger" data-fifth-data="${fifthData}">
                                        <i class="pe-7s-trash btn-icon-wrapper"></i>
                                    </button>
                                   <button  Id="imgeShow-btn" class="mb-2 mr-2 btn-icon btn-icon-only btn-shadow btn-outline-2x btn btn-outline-info" data-fifth-data="${fifthData}">
                                     <i class="lnr-picture btn-icon-wrapper"></i>
                                 </button>
                                </div>
                            </td>
                        `;
                        row += '</tr>';
                        $("#added_row_table tbody").append(row);
                    });

                    // Show the table div after data is added
                    $("#added_row_table_div").show();

                    updateTotalAmount();

                } else {
                    alert("Failed to delete the row: " + deleteResponse.message);
                }
            },
            error: function () {
                alert("Error occurred while deleting the row.");
            }
        });

    });

            $(document).on('click', '#imgeShow-btn', function () {
               // alert("img icon click");

                let fifthDataValue = $(this).data("fifth-data");
               // alert(fifthDataValue);

    // AJAX request to delete the item
           $.ajax({
        url: '@Url.Action("popup_click", "NCD_AmountCollection")',
        type: 'POST',
        data: JSON.stringify({ track_id: fifthDataValue }), // Send the 5th data value in the request body
        contentType: 'application/json',
               success: function (response) {
                   if (response.sucess === false) {
                       // If the server indicates failure, alert the failure message
                       alert(response.message);
                   } else {
                       // If successful, alert the success message and data (e.g., image URL)
                       // alert('Success! Image URL: ' + response.data);
                       var getImageValue = response.data;
                       // alert(getImageValue);

                       if (getImageValue != null) {
                           if (getImageValue.startsWith("data:image")) {
                               //  alert("image");
                               displayPhoto(getImageValue, 'image');
                           } else if (getImageValue.startsWith("data:application/pdf")) {
                               //   alert("pdf");
                               displayPhoto(getImageValue, 'pdf');
                           } else {
                               alert("Unknown file type");
                           }
                       } else {
                           alert("No image URL received");
                       }
                   }
               },
        error: function () {
            alert("Error occurred while deleting the row.");
        }
    });

});

        });
        $(document).on('click', '.btn-warning', function () {
            alert("btn warning");
            $(this).closest('tr').remove();
            updateTotalAmount()// Remove the row on button click
        });

        function formatDate(dateString) {
            var date = new Date(dateString);
            var options = { day: '2-digit', month: 'short', year: 'numeric' };
            return date.toLocaleDateString('en-GB', options); // 'en-GB' for DD-MMM-YYYY format
        }
        function updateTotalAmount() {
           // alert("total calculate");
            let total = 0;
            $('#added_row_table tbody tr').each(function () {
                // Get the amount from the 6th cell (index 5) of each row
                const amount = parseFloat($(this).find('td:eq(1)').text().trim());
               // alert(amount);
                if (!isNaN(amount)) {
                    total += amount;
                }
            });
            // Update the total amount in the span
           // alert(total);
            $('#totalAmountTextbox').text(total.toFixed(2)); // Display with 2 decimal places
        }
    });





        function displayPhoto(dataUrl, type) {
            // alert("display");
            var modal = document.getElementById('mediaModal');
            var content = document.getElementById('pdfViewer'); // Use pdfViewer as content

            if (type === 'pdf') {
                // Convert base64 to Blob
                var base64Data = dataUrl.split(',')[1];
                var binaryString = atob(base64Data);
                var len = binaryString.length;
                var bytes = new Uint8Array(len);
                for (var i = 0; i < len; i++) {
                    bytes[i] = binaryString.charCodeAt(i);
                }
                var blob = new Blob([bytes], { type: 'application/pdf' });
                var blobUrl = URL.createObjectURL(blob);

                // Embed PDF in an iframe
                content.innerHTML = `
                    <iframe id="pdfFrame" src="${blobUrl}" style="width:100%; height:400px; border:none; border: 7px solid #ddd;" frameborder="0"></iframe>`;

                //        content.innerHTML = `
                ////          <div style="padding-top:25px; padding-left:120px;">
                ////            <iframe src="${blobUrl}" style="width:100%; height:600px; border:none;" frameborder="0"></iframe>
                ////          </div>`;

                // Hide zoom controls for PDFs
                document.getElementById('zoomControls').style.display = 'none';

            } else if (type === 'image') {
                content.innerHTML = `
                  <div id="imageWrapper" style="width:700px; height:400px; overflow:auto; background-color:white; border: 7px solid #ddd;">
                      <img id="modalImage" src="${dataUrl}" style="width:600px; padding-left:120px; padding-top:35px; transform: scale(1);" />
                  </div>`;

                // Show zoom controls for images
                document.getElementById('zoomControls').style.display = 'block';

                // Add zoom functionality for image
                let scale = 1;
                const zoomStep = 0.1;
                const modalImage = document.getElementById('modalImage');

                document.getElementById('zoomIn').addEventListener('click', () => {
                    scale += zoomStep;
                    modalImage.style.transform = `scale(${scale})`;
                });

                document.getElementById('zoomOut').addEventListener('click', () => {
                    if (scale > zoomStep) {
                        scale -= zoomStep;
                        modalImage.style.transform = `scale(${scale})`;
                    }
                });
                let rotationAngle = 0;

                document.getElementById('rotateImage').addEventListener('click', function () {
                    // alert("rotate");
                    rotationAngle += 90; // Rotate by 90 degrees each time the button is clicked
                    document.getElementById('modalImage').style.transform = 'rotate(' + rotationAngle + 'deg)';
                });
            }

            modal.style.display = 'block';
        }



        document.addEventListener('DOMContentLoaded', function () {
            var mediaModalContent = document.getElementById('mediaModalContent');

            // Check if the element exists
            if (mediaModalContent) {
                // Apply dragging functionality to the media modal content
                mediaModalContent.addEventListener('mousedown', function (event) {
                    // alert("alert");  // This should trigger now
                    makeDraggable(document.getElementById('mediaModal'));
                });
            } else {
                console.error('Element #mediaModalContent not found');
            }
        });

        function makeDraggable(element) {
            var isDragging = false;
            var offsetX, offsetY;

            element.onmousedown = function (event) {
                isDragging = true;
                offsetX = event.clientX - element.getBoundingClientRect().left;
                offsetY = event.clientY - element.getBoundingClientRect().top;

                // Disable text selection while dragging
                document.body.style.userSelect = 'none';

                document.onmousemove = function (event) {
                    if (isDragging) {
                        var modal = document.getElementById('mediaModal');
                        modal.style.left = (event.clientX - offsetX) + 'px';
                        modal.style.top = (event.clientY - offsetY) + 'px';
                    }
                };

                document.onmouseup = function () {
                    isDragging = false;
                    document.onmousemove = null;
                    // Re-enable text selection after dragging
                    document.body.style.userSelect = 'auto';
                };
            };
        }



        // Apply dragging functionality to the header
        document.getElementById('pdfViewer').addEventListener('mousedown', function (event) {
            makeDraggable(document.getElementById('mediaModal'));
        });


        window.onclick = function (event) {
            //  alert("mediaModal click");
            var modal = document.getElementById("mediaModal");
            if (event.target == modal) {
                closeModal();
            }
        }

        function closeModal() {
            // alert("close");
            var modal = document.getElementById("mediaModal");
            modal.style.display = "none";
        }






        document.addEventListener('DOMContentLoaded', function () {
            const checkboxes = document.querySelectorAll('.select-checkbox');
            const selectedRowTable = document.getElementById('selectedRowTable');
            const selectedRowContainer = document.getElementById('selectedRowContainer');

            checkboxes.forEach(function (checkbox) {
                checkbox.addEventListener('change', function () {
                    if (this.checked) {
                        // Uncheck other checkboxes
                        checkboxes.forEach(function (otherCheckbox) {
                            if (otherCheckbox !== checkbox) {
                                otherCheckbox.checked = false;
                            }
                        });

                        // Get the row associated with this checkbox
                        const row = this.closest('tr');
                        const rowData = Array.from(row.querySelectorAll('td')).map(td => td.innerText);

                        // Example: Assuming you want to get the values of specific columns, say index 2 and 4
                        const column3Value = rowData[3]; // Get value from 3rd column (index 2)
                        const applicationId = rowData[1]; // Get value from 5th column (index 4)
                        callAddBtnClick(applicationId);

                       // Debugging output

                        // Do something with the selected column values
                        // For instance, populate them in some input fields or variables

                        // Clear the selected row table content
                        selectedRowTable.querySelector('thead tr').innerHTML = '';
                        selectedRowTable.querySelector('tbody tr').innerHTML = '';

                        // Get the headers from the original table
                        const originalTableHeaders = document.querySelectorAll('#cus_detailsDataGrid th');
                        originalTableHeaders.forEach((th, index) => {
                            if (index > 0) { // Skip the "Select" column header
                                const newTh = document.createElement('th');
                                newTh.textContent = th.textContent;
                                selectedRowTable.querySelector('thead tr').appendChild(newTh);
                            }
                        });

                        // Populate the selected row table
                        rowData.forEach((data, index) => {
                            if (index > 0) { // Skip the "Select" column data
                                const newTd = document.createElement('td');
                                newTd.textContent = data;
                                selectedRowTable.querySelector('tbody tr').appendChild(newTd);
                            }
                        });

                        // Show the selected row container and other elements
                        selectedRowContainer.style.display = 'block';
                        $("#cus_detailsDataGrid").hide();
                        $("#textbox_div1").show();
                        $("#textbox_div2").show();
                        $("#AddBtn_div").show();
                        document.getElementById('txtCustomerName').value = column3Value;

                    } else {
                        // Clear the selected row table if no checkbox is checked
                        selectedRowTable.querySelector('thead tr').innerHTML = '';
                        selectedRowTable.querySelector('tbody tr').innerHTML = '';
                        selectedRowContainer.style.display = 'none';
                    }
                });
            });
        });

        $(document).ready(function () {
        // Call the controller action to get the pay modes
        $.ajax({
            url: '@Url.Action("GetPayModes", "NCD_AmountCollection")', // Replace 'YourControllerName' with the actual name of your controller
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                // Populate the dropdown with the data
                var dropdown = $('#paymode_texBox');
                dropdown.empty(); // Clear existing options
               // dropdown.append('<option value="">Select Pay Mode</option>'); // Default option

                $.each(data, function (index, item) {
                    dropdown.append($('<option>', {
                        value: item.Value,
                        text: item.Text
                    }));
                });
            },
            error: function (xhr, status, error) {
                console.error('Error loading pay modes:', error);
            }
        });
        });


         function handlePincodeChange() {
    var ifsc_code = document.getElementById("txt_ifsc").value;

    // Perform an AJAX request to the controller
    $.ajax({
        url: '@Url.Action("GetBankDetails", "NCD_AmountCollection")', // Update with your controller name
        type: 'POST',
        data: { ifsc_code: ifsc_code },
        success: function (response) {
            //alert("success");

            // Iterate over the response, assuming it's an array
            if (response.length > 0) {
                var bankDetails = response[0]; // Assuming you want the first result
                //alert("Bank Name: " + bankDetails.BankName + ", Branch Name: " + bankDetails.BranchName);

                // Example: Updating UI with bank details
                $('#bankName_txtbox').val(bankDetails.BankName);
                $('#branchName_txtbox').val(bankDetails.BranchName);
                $('#hidden_bank_id').val(bankDetails.Bank_id);
               // alert("bank id" + bankDetails.Bank_id);
                // Add more UI updates as required
            } else {
                alert("No bank details found.");
                $('#txt_ifsc').val('');

            }
        },
        error: function(err) {
            console.error("Error fetching bank details:", err);
        }
    });
}


    function handleSubmit() {
       //alert('Submit button clicked!');
        var table = document.getElementById("selectedRowTable");

        var cellValue = parseFloat(table.rows[1].cells[6].innerText.trim());




        var totalAmount = $('#totalAmountTextbox').text();
       // alert(totalAmount);

        if (cellValue == totalAmount)
        {


            $.ajax({
                url: '/NCD_AmountCollection/submit_Btn_click', // Replace with your controller name
                type: 'POST',

                success: function (response) {
                    if (response.success) {
                        //alert(response.message);

                        Swal.fire({
                            title: response.data,
                            icon: "success"
                        }).then(() => {
                            window.location.reload();
                        });

                    } else {
                        Swal.fire({
                            title: "",
                            text: response.data,
                            icon: "error",
                            confirmButtonText: "OK"

                        });
                    }

                },
                error: function (xhr, status, error) {
                    alert('Error: ' + error);
                    // Handle error logic here
                }
            });
        }
        else
        {
            //alert("Debenture amount should be match with Total Amount!");

            alert("Total Amount should be match with Debenture amount!");
        }
    }



    function openFileInput(event) {
        // Prevent form submission
        event.preventDefault();

        // Trigger file input click
        document.getElementById('Bankattach1').click();
    }
    </script>

</body>
</html>
