<style>

    /* The Modal (background) */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.9); /* Black w/ opacity */
    }

    /* Modal Content (image) */
    .modal-content {
        margin: auto;
        display: block;
        width: 80%;
        max-width: 700px;
    }


    /* Caption of Modal Image */
    #caption {
        margin: auto;
        display: block;
        width: 60%;
        /*max-width: 700px;*/
        text-align: center;
        color: #ccc;
        padding: 10px 0;
        /*height: 150px;*/
        height: 100%;
    }

    /* The Close Button */
    .close {
        position: absolute;
        top: 15px;
        right: 35px;
        color: #f1f1f1;
        font-size: 40px;
        font-weight: bold;
        transition: 0.3s;
    }

        .close:hover,
        .close:focus {
            color: #bbb;
            text-decoration: none;
            cursor: pointer;
        }
</style>

<div class="row">
    <div class="col-md-6 col-lg-4">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span style="width:140px;" class="input-group-text">House Name/No<span style="color:red">*</span></span>
            </div>
            <input type="text" class="form-control" placeholder="" id="p_house_name" name="p_house_name" aria-label="" aria-describedby="basic-addon1" maxlength="50"
               oninput="this.value = this.value.replace(/[^a-zA-Z0-9 ]/g, '').toUpperCase()"
                @if (Model != null) { <text> value="@Model.p_house_name" </text> }>


        </div>
    </div>

    <div class="col-md-6 col-lg-4">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span style="width:140px;" class="input-group-text">Land Mark<span style="color:red">*</span></span>
            </div>
            @*<input type="text" class="form-control" id="p_landmark" name="p_landmark" placeholder="" aria-label="" aria-describedby="basic-addon1">*@

            <input type="text" class="form-control" id="p_landmark" name="p_landmark" placeholder="" aria-label="" aria-describedby="basic-addon1"
                   oninput="this.value = this.value.replace(/[^a-zA-Z0-9 ]/g, '').toUpperCase()"
                   @if (Model != null) { <text> value="@Model.p_landmark" </text> }>




        </div>
    </div>

    <div class="col-md-6 col-lg-4">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span style="width:140px;" class="input-group-text">City / Place<span style="color:red">*</span></span>
            </div>
            @*<input type="text" class="form-control" placeholder="" id="p_City" name="p_City" aria-describedby="basic-addon1" oninput="this.value = this.value.replace(/[^a-zA-Z\s]/g, '')" maxlength="50">*@

            <input type="text" class="form-control" id="p_City" name="p_City" placeholder="" aria-label="" aria-describedby="basic-addon1"
        oninput="this.value = this.value.replace(/[^a-zA-Z\s]/g, '').toUpperCase()" @if (Model != null) { <text> value="@Model.p_City" </text> }>


            @*<input type="text" class="form-control" id="p_City" name="p_City" placeholder="" aria-label="" aria-describedby="basic-addon1"
                   oninput="this.value = this.value.replace(/[^a-zA-Z\s]/g, '').toUpperCase()"
                   value="@(Model != null ? Model.p_City : null)">*@



        </div>
    </div>
</div>
@*Eighth row starts here....*@

<div class="row">
    <div class="col-md-6 col-lg-4">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span style="width:140px;" class="input-group-text" id="basic-addon1">Pincode<span style="color:red">*</span></span>
            </div>
            @*<input type="text" class="form-control" id="txt_cust_p_pincode" placeholder="" aria-label="" aria-describedby="basic-addon1" onkeyup="if(/\D/g.test(this.value)) this.value = this.value.replace(/\D/g,'')" maxlength="6">*@
           
            
            <input type="text" class="form-control" id="txt_cust_pincode_permanent" placeholder="" aria-label="" aria-describedby="basic-addon1" onkeyup="if(/\D/g.test(this.value)) this.value = this.value.replace(/\D/g,'')" maxlength="6"
        @if (Model != null) { <text> value="@Model.p_Pincode" </text> }>

            @*<input type="text" class="form-control" id="txt_cust_pincode_permanent" placeholder="" aria-label="" aria-describedby="basic-addon1" onkeyup="if(/\D/g.test(this.value)) this.value = this.value.replace(/\D/g,'')" maxlength="6"
                   value="@(Model != null ? Model.p_Pincode : null)" readonly>*@



        </div>
    </div>


    <div class="col-md-6 col-lg-4">
        <div class="input-group mb-3">

            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <span style="width:140px;" class="input-group-text" id="basic-addon1">Post Office<span style="color:red">*</span></span>
                </div>

                <select id="p_PostOffice" class="form-control" name="p_PostOffice" required>
                    <!-- This option will be dynamically populated using the fillDropdown function -->
                </select>


                @*<select id="p_PostOffice" class="form-control" name="p_PostOffice" required>
                        <option value="0">----- Select -----</option>

                    </select>*@

                @*<select id="PostOffice" class="form-control" name="PostOffice" required>
                        @if (Model != null && Model.p_Post_name != null)
                        {

                            <option value="@Model.p_Post_name">@Model.p_Post_name</option>

                        }
                        else
                        {
                            <option value="0">----- Select -----</option>
                        }
                    </select>*@


            </div>
        </div>
    </div>


    <div class="col-md-6 col-lg-4">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                @*@Html.TextBoxFor(model => model.Return, new { @class = "form-control" })

            @Html.ValidationMessageFor(model => model.Return, "", new { @class = "text-danger" })*@
                <span style="width:140px;" class="input-group-text" id="basic-addon1">District</span>
            </div>
            <input type="text" class="form-control" placeholder="" aria-label="" aria-describedby="basic-addon1" id="p_District" name="p_District"
        @if (Model != null) { <text> value="@Model.p_District" </text> } readonly>

            @*<input type="text" class="form-control" placeholder="" aria-label="" aria-describedby="basic-addon1" id="p_District" name="p_District"
                   value="@(Model?.p_District)" readonly>*@



        </div>
    </div>
</div>


@*Ninenth row starts here....*@

<div class="row" style="margin-top:-15px; margin-bottom:2px;">
    <div class="col-md-6 col-lg-4">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span style="width:140px;" class="input-group-text" id="basic-addon1">State</span>
            </div>
            <input type="text" id="p_State" name="p_State" class="form-control"
        @if (Model != null) { <text> value="@Model.p_State" </text> } readonly>

            @*<input type="text" id="p_State" name="p_State" class="form-control"
        @if (Model != null && Model.p_State != null) { <text> value="@Model.p_State" </text>  }
        readonly>*@


            <!--<input type="text" id="p_State" name="p_State" class="form-control"
                   value="@Model?.p_State"
                   readonly>-->



        </div>
    </div>
    <div class="col-md-6 col-lg-4">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                @*<span style="width: 140px; background-color: #eff9ff;" class="input-group-text" id="basic-addon1">Attachment<span style="color:red">*</span></span>*@
                <div>
                    @*<input type="file" id="image" name="image" style="font-size: 15px;" required />*@

                    @if (Model.ImageUrl1 != null)
                    {
                        <input type="file" id="image" name="image" style="font-size: 15px;"  />
                    }
                    else
                    {
                        <input type="file" id="image" name="image" style="font-size: 15px;" required />
                    }
                </div>

            </div>

        </div>

    </div>
    <div class="col-md-6 col-lg-4" >

        @if (Model.ImageUrl1 != null && Model.ImageUrl1.StartsWith("data:image"))
        {
           
            <img src="~/images/image_attachment_icon.jpg" alt="Icon Image" id="btn_per_attach" onclick="displayPhoto('@Model.ImageUrl1','image')" style="height:37px;width:37px;" />
        }
        else if (Model.ImageUrl1 != null && Model.ImageUrl1.StartsWith("data:application/pdf"))
        {
          
             <img src="~/images/image_attachment_icon.jpg" alt="Icon Image" id="btn_per_attach" onclick="displayPhoto('@Model.ImageUrl1','pdf')" style="height:37px;width:37px;" />
        }



        @*<img src="~/images/image_attachment_icon.jpg" alt="Icon Image" id="btn_per_attach" onclick="displayPhoto('@Model.ImageUrl1','image')" style="height:37px;width:37px;" />*@
    </div>
    <div id="photoModal" class="modal">
        <span class="close" onclick="closeModal()">&times;</span>
        <img class="modal-content " id="customerPhoto">
        <div id="caption"></div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script>
    $(document).ready(function () {

        $("#txt_cust_pincode_permanent").on("focusout", function () {
          
          
            var pincode = $(this).val();
          
           
                $.ajax({

                    url: '@Url.Action("permanent_PincodeChanged", "Customer_Registration")',
                    type: 'POST',
                    data: { pincode: pincode },
                    dataType: 'json',
                    success: function (result) {
                        // Clear existing options for Post Office dropdown
                        $("#p_PostOffice").empty();

                        // Add new options for Post Office dropdown based on the result
                        $.each(result.PostOffices, function (index, item) {
                            $("#p_PostOffice").append($('<option>', {
                                value: item.Value,
                                text: item.Text
                            }));
                        });

                        // Set the value for the District text input
                        $("#p_District").val(result.Districts[0].Text); // Assuming you want the first district as an example
                        $("#p_State").val(result.States[0].Text);


                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log("Error:", jqXHR.responseText);
                        console.log("Status:", textStatus);
                        console.log("Error Thrown:", errorThrown);
                        //    alert('Error occurred while fetching data. See console for details.');
                    }
                });
            
});

     });


 $(document).ready(function () {
     // Attach a change event handler to the dropdown
     $('#PostOffice_permanent').on('change', function () {
         // Get the selectedPostID from the selected option's value
         var selectedPostID = $(this).val();

         // Send the selectedPostID to the SavePostID action
         $.ajax({
             type: 'POST',
             url: '/Customer_Registration/SavePostIDpermanent',
             data: { selectedPostID: selectedPostID },
             success: function (response) {
                 // Check the response from the server
                 if (response === 'Success') {
                     // Handle success, for example, show a success message
                    /* alert('Post ID saved successfully!');*/

                     // Retrieve the saved post ID from TempData (if needed)
                     var savedPostID = '@TempData["per_postid"]';
                     console.log('Saved Post ID:', savedPostID);
                 } else {
                     // Handle other responses or errors
                     alert('Error saving Post ID');
                 }
             },
             error: function (error) {
                 // Handle AJAX error
                 console.error('AJAX error:', error);
             }
         });
     });
 });
</script>



@*--- when the continue clicks the dropdown must be selected and the other options are there ---*@





@*@if (Model != null && Model.p_Post_name != null)
    {
        <script>
            $(document).ready(function () {
                // Function to fill the Permanent Post Office dropdown based on pincode
                function fillPermanentDropdown(pincode, selectedValue) {
                    // ... (your existing AJAX code)
                }

                // Function to populate form values for Permanent Address on page load
                function populatePermanentFormValues(model) {
                    // ... (your existing code)

                    // Check if the model.p_Post_name is null and trigger the focusout event for Permanent Address
                    if (model && model.p_Post_name == null) {
                        $("#txt_cust_pincode_permanent").trigger("focusout");
                    }

                    // Attach the focusout event separately for Permanent Address
                    $("#txt_cust_pincode_permanent").on("focusout", function () {
                        var pincode = $(this).val();
                        // You can adjust this part based on your actual requirements
                        // Call the fillPermanentDropdown function or perform any other logic as needed
                        // fillPermanentDropdown(pincode, selectedValue);
                    });
                }

                // Trigger the populatePermanentFormValues function on page load
                // Pass the model as an argument if it's available in the view
                populatePermanentFormValues(@Html.Raw(Json.Encode(Model)));
            });


        </script>*@



@*<script>
    $(document).ready(function () {
        // Function to fill the Post Office dropdown based on pincode
        function fillPermanentDropdown(pincode, selectedValue) {
            $.ajax({
                url: '@Url.Action("permanent_PincodeChanged", "Customer_Registration")',
                type: 'POST',
                data: { pincode: pincode },
                dataType: 'json',
                success: function (result) {
                    // Clear existing options for Post Office dropdown
                    $("#p_PostOffice").empty();

                    // Add new options for Post Office dropdown based on the result
                    $.each(result.PostOffices, function (index, item) {
                        var option = $('<option>', {
                            value: item.Value,
                            text: item.Text
                        });

                        // Set selected based on the condition
                        if (item.Value === selectedValue || (selectedValue === null && item.Value === $('#hiddenPostOffice').val())) {
                            option.prop('selected', true);
                        }

                        $("#p_PostOffice").append(option);
                    });

                    // Set the value for the District and State text inputs
                    $("#district_name").val(result.Districts[0]?.Text || ''); // Assuming you want the first district as an example
                    $("#state_name").val(result.States[0]?.Text || '');
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error("Error:", jqXHR.responseText);
                    console.error("Status:", textStatus);
                    console.error("Error Thrown:", errorThrown);
                //    alert('Error occurred while fetching data. See console for details.');
                }
            });
        }

        // Function to populate form values on page load
        function populateFormValues(model) {
            // Use the model.Pincode and model.p_PostOffice instead of the hardcoded values
            var pincodeFromTable = model ? model.p_Pincode : null;
            var selectedValueFromTable = model ? model.p_PostOffice : null;

            // Populate the dropdown based on the provided values
            fillDropdown(pincodeFromTable, selectedValueFromTable);

            // Additional logic to populate other form fields with values from the table
            // ...
        }

        // Trigger the populateFormValues function on page load
        // Pass the model as an argument if it's available in the view
        populateFormValues(@Html.Raw(Json.Encode(Model)));

        // Check if the model.p_PostOffice is null and trigger the focusout event
        if (@Model?.p_PostOffice == null) {
            $("#txt_cust_pincode_permanent").trigger("focusout");
        }

        // Attach the focusout event separately
        $("#txt_cust_pincode_permanent").on("focusout", function () {
            var pincode = $(this).val();
            // You can adjust this part based on your actual requirements
            // Call the fillDropdown function or perform any other logic as needed
            // fillDropdown(pincode, selectedValue);
        });
    });
     </script>*@















<script>
        $(document).ready(function () {
            // Function to fill the Permanent Post Office dropdown based on pincode
            function fillPermanentDropdown(pincode, selectedValue) {
                $.ajax({
                    url: '@Url.Action("permanent_PincodeChanged", "Customer_Registration")',
                    type: 'POST',
                    data: { pincode: pincode },
                    dataType: 'json',
                    success: function (result) {
                        // Clear existing options for Permanent Post Office dropdown
                        $("#p_PostOffice").empty();

                        // Add new options for Permanent Post Office dropdown based on the result
                        $.each(result.PostOffices, function (index, item) {
                            var option = $('<option>', {
                                value: item.Value,
                                text: item.Text
                            });

                            // Set selected based on the condition
                            if (item.Value === selectedValue || (selectedValue === null && item.Value === $('#hiddenPermanentPostOffice').val())) {
                                option.prop('selected', true);
                            }

                            $("#p_PostOffice").append(option);
                        });

                        // Set the value for the District and State text inputs in Permanent Address
                        $("#p_District").val(result.Districts[0]?.Text || ''); // Assuming you want the first district as an example
                        $("#p_State").val(result.States[0]?.Text || '');
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error("Error:", jqXHR.responseText);
                        console.error("Status:", textStatus);
                        console.error("Error Thrown:", errorThrown);
                    }
                });
            }

            // Function to populate form values for Permanent Address on page load
            function populatePermanentFormValues(model) {
                // Use the model.p_Pincode and model.p_PostOffice instead of the hardcoded values
                var pincodeFromTable = model ? model.p_Pincode : null;
                var selectedValueFromTable = model ? model.p_PostOffice : null;

                // Populate the Permanent Post Office dropdown based on the provided values
                fillPermanentDropdown(pincodeFromTable, selectedValueFromTable);

                // Additional logic to populate other form fields in Permanent Address with values from the table
                // ...
            }

            // Trigger the populatePermanentFormValues function on page load
            // Pass the model as an argument if it's available in the view
            populatePermanentFormValues(@Html.Raw(Json.Encode(Model)));

            // Check if the model.p_PostOffice is null and trigger the focusout event for Permanent Address
            if (@Model?.p_PostOffice == null) {
                $("#txt_cust_pincode_permanent").trigger("focusout");
            }

            // Attach the focusout event separately for Permanent Address
            $("#txt_cust_pincode_permanent").on("focusout", function () {
                var pincode = $(this).val();
                // You can adjust this part based on your actual requirements
                // Call the fillPermanentDropdown function or perform any other logic as needed
                // fillPermanentDropdown(pincode, selectedValue);
            });
        });
</script>


@*<button class="button_style" style="background-color:#808080; height: 35px; width: 150px; border-radius: 8px; color: white; border-color: white; font-size: medium;" id="btn_save">View Attachment</button>*@

@*<script>
        // Get the icon element
        var icon = document.getElementById('btn_per_attach');

        // Add click event listener
        icon.addEventListener('click', function () {
            // Redirect to the desired URL
            window.location.href = '/Customer_Registration/per_attach_view';
        });
    </script>

    <script>
        function displayPhoto(fileUrl, fileType) {
            var modal = document.getElementById("photoModal");
            var modalImg = document.getElementById("customerPhoto");
            var caption = document.getElementById("caption");

            modal.style.display = "block";

            if (fileType === "image") {
                modalImg.src = fileUrl;
                caption.innerHTML = '<span id="closeImage">Close Image</span>'; // Modified caption
                var closeSpan = document.getElementById("closeImage");
                closeSpan.addEventListener("click", function () {
                    closeModal();
                });
            } else if (fileType === "pdf") {
                modalImg.src = "";
                caption.innerHTML = '<object data="' + fileUrl + '" type="application/pdf" width="100%" height="100%"><p>PDF viewer required. Download it <a href="' + fileUrl + '">here</a>.</p></object>';
            }

            var span = document.getElementsByClassName("close")[0];
            span.onclick = function () {
                closeModal();
            };
        }

        window.onclick = function (event) {
            var modal = document.getElementById("photoModal");
            if (event.target == modal) {
                closeModal();
            }
        }

        function closeModal() {
            var modal = document.getElementById("photoModal");
            modal.style.display = "none";
        }
    </script>*@


<script>
    function displayPhoto(fileUrl, fileType) {
        var modal = document.getElementById("photoModal");
        var modalImg = document.getElementById("customerPhoto");
        var caption = document.getElementById("caption");

        modal.style.display = "block";

        if (fileType === "image") {
            modalImg.src = fileUrl;
            caption.innerHTML = '<span id="closeImage">Close Image</span>'; // Modified caption
            var closeSpan = document.getElementById("closeImage");
            closeSpan.addEventListener("click", function () {
                closeModal();
            });
        } else if (fileType === "pdf") {
            modalImg.src = "";
            caption.innerHTML = '<object data="' + fileUrl + '" type="application/pdf" width="100%" height="100%"><p>PDF viewer required. Download it <a href="' + fileUrl + '">here</a>.</p></object>';
        }

        var span = document.getElementsByClassName("close")[0];
        span.onclick = function () {
            closeModal();
        };
    }

    window.onclick = function (event) {
        var modal = document.getElementById("photoModal");
        if (event.target == modal) {
            closeModal();
        }
    }

    function closeModal() {
        var modal = document.getElementById("photoModal");
        modal.style.display = "none";
    }
</script>










