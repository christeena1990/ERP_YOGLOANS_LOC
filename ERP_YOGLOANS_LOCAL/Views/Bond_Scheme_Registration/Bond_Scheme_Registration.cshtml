

<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="~/Content/input_styles.css" />

    @*/////////////form submission output message shown here///////////*@


    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

    <script>
 $(document).ready(function () {
     // Get the message and alert type from TempData
     var message = '@TempData["Message"]';
     var alertType = '@TempData["AlertType"]';

     if (message) {
         // Determine the icon based on the alert type
         var icon = alertType === "success" ? "success" : "error";

         Swal.fire({
             //title: alertType === "success" ? "Success" : "Error",
             //text: message,
             title: alertType === "success" ? "Scheme registration completed successfully!" : "An error occurred.Please try again.",
             /* text: message,*/
             icon: icon,
             confirmButtonText: "OK"
         });
     }
 });
    </script>

    @*/////////////form submission output message shown here///////////*@



</head>
<body>


    @*<div class="main-panel" style="background-color: #ffffff; width: 100%;">*@



            <div class="app-main__inner" style="margin-top: -30px;padding:4px;width:100%;">

                <div style="height: 50px; display: flex; align-items: center; justify-content: center;">
                    @*<br />*@
                    <div class="card-title">
                        <br /><br />
                        <h6 style="font-weight: bold; font-size: 25px; margin: 0;color:maroon">  Scheme Registration</h6>
                    </div>
                </div>
                <br />

                @*------  first row--------*@
            <form method="post" id="SubmitSchemeRegistration" action="@Url.Action("SubmitSchemeRegistration", "Bond_Scheme_Registration")" enctype="multipart/form-data" autocomplete="off" style="width: 100%; ">

                <div class="row" style="padding-bottom: 5px;">
                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="issue_no" name="issue_no" required value="@Session["Issue_no_bond"]" readonly />
                            <label for="issue_no">Issue Number</label>
                        </div>
                    </div>


                    <div class="col-md-6 col-lg-3">
                        <div class="input-container">
                            <label for="interest_type" style="top: -3px; font-size: 12px; font-weight: bold;">Interest Type<span style="color:red"> *</span></label>
                            <div class="radio-container">
                                <div class="radio-option">
                                    <input type="radio" id="interest_type_month" name="interest_type" value="F" required />
                                    <label for="interest_type_month" style="font-size:12px">Month</label>
                                </div>
                                <div class="radio-option" style="padding-left: 0px;">
                                    <input type="radio" id="interest_type_cumulative" name="interest_type" value="C" required />
                                    <label for="interest_type_cumulative" style="font-size:12px">Cumltv</label>
                                </div>
                                <div class="radio-option" style="padding-left: 0px;">
                                    <input type="radio" id="interest_type_both" name="interest_type" value="B" required />
                                    <label for="interest_type_both" style="font-size:12px">Both</label>
                                </div>
                            </div>
                        </div>
                    </div>


     
                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="period" name="period"
                                   maxlength="3"
                                   oninput="this.value = this.value.replace(/\D/g, '').substring(0, 3);"
                                   required />
                            <label for="period">Period (Month)<span style="color:red"> *</span></label>
                        </div>
                    </div>


                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="face_value" name="face_value" readonly required value="@Session["FaceValue"]" />
                            <label for="face_value">Face Value</label>
                        </div>
                    </div>





                    <div class="col-md-6 col-lg-3">
                        <div class="input-container">
                            <input type="text" id="total_fund" name="total_fund"
                                   maxlength="11"
                                   oninput="this.value = this.value.replace(/\D/g, '').substring(0, 11); total_deb(); showAmountInWords('total_fund', 'totalFundInWords');"
                                   onfocus="showAmountInWords('total_fund', 'totalFundInWords');"
                                   onblur="hideAmountInWords('totalFundInWords');"
                                   required />
                            <label for="total_fund">Total Fund<span style="color:red"> *</span></label>
                            <span id="totalFundInWords" style="color: red; font-size: 12px; display:none;"></span> <!-- Display for Total Fund in words -->
                        </div>
                    </div>



                </div>

                <!-- Second Row -->
                <div class="row" style="padding-bottom: 5px;">

                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="number_of_debentures" readonly name="number_of_debentures" required />
                            <label for="number_of_debentures">No. Of Subord. Debt</label>
                        </div>
                    </div>


                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="date" id="issue_start" name="issue_start" oninput="validateDateRange()" required />
                            <label for="issue_start">Issue Start<span style="color:red"> *</span></label>
                            <span id="date-error" style="color: red; font-size: small;"></span>
                        </div>
                    </div>

                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="date" id="issue_end" name="issue_end" oninput="validateDateRange()" required />
                            <label for="issue_end">Issue End<span style="color:red"> *</span></label>
                            <span id="date-error" style="color: red; font-size: small;"></span>
                        </div>
                    </div>



                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="min_amount" name="min_amount"
                                   oninput="this.value = this.value.replace(/\D/g, ''); validateMinAmount(); showAmountInWords('min_amount', 'minAmountInWords');"
                                   onfocus="showAmountInWords('min_amount', 'minAmountInWords');"
                                   onblur="hideAmountInWords('minAmountInWords');"
                                   required />
                            <label for="min_amount">Min. Amount<span style="color:red"> *</span></label>
                            <span id="minAmountInWords" style="color: red; font-size: small; display:none;"></span> <!-- Display for Min. Amount in words -->
                        </div>
                    </div>




                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="locking_period" name="locking_period" oninput="this.value = this.value.replace(/\D/g, '');" readonly required />
                            <label for="locking_period">Locking Period </label>
                        </div>
                    </div>


                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <label for="canvasser_commission" style="top: -3px; font-size: 12px; font-weight: bold;">Canvasser Comsn<span style="color:red"> *</span></label>
                            <div class="radio-container">
                                <div class="radio-option">
                                    <input type="radio" id="canvasser_commission_yes" name="canvasser_commission" value="Y" required />
                                    <label for="canvasser_commission_yes">Yes</label>
                                </div>
                                &nbsp; &nbsp; &nbsp;
                                <div class="radio-option">
                                    <input type="radio" id="canvasser_commission_no" name="canvasser_commission" value="N" required />
                                    <label for="canvasser_commission_no">No</label>
                                </div>
                            </div>
                        </div>
                    </div>




                </div>

                <!-- Third Row -->
                <div class="row" style="padding-bottom: 5px;">

                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="interest_rate_fixed" name="interest_rate_fixed" maxlength="2" oninput="this.value = this.value.replace(/[^0-9.]/g, '').substring(0, 2); " pattern="\d+(\.\d{1,2})?" required />

                            <label for="interest_rate_fixed"> Fixed Int.(%)<span style="color:red"> *</span></label>
                        </div>
                    </div>


                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="interest_rate_cmltv" name="interest_rate_cmltv" maxlength="2" oninput="this.value = this.value.replace(/[^0-9.]/g, '').substring(0, 2); " pattern="\d+(\.\d{1,2})?" required />

                            <label for="interest_rate_cmltv"> Cumulative Int.(%)<span style="color:red"> *</span></label>
                        </div>
                    </div>


                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <label for="senior_citizen" style="top: -3px; font-size: 12px; font-weight: bold;">Senior Citizen<span style="color:red"> *</span></label>
                            <div class="radio-container">
                                <div class="radio-option">
                                    <input type="radio" id="senior_citizen_yes" name="senior_citizen" value="Y" required />
                                    <label for="senior_citizen_yes">Yes</label>
                                </div>
                                &nbsp; &nbsp; &nbsp;
                                <div class="radio-option">
                                    <input type="radio" id="senior_citizen_no" name="senior_citizen" value="N" required />
                                    <label for="senior_citizen_no">No</label>
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="text" id="senior_citizen_interest" name="senior_citizen_interest" maxlength="2" oninput="this.value = this.value.replace(/[^0-9.]/g, '').substring(0, 2); " pattern="\d+(\.\d{1,2})?" readonly />
                            <label for="senior_citizen_interest">Senior Cit. Int. (%)<span style="color:red"> *</span></label>
                        </div>
                    </div>





                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="date" id="meet_date" name="meet_date" oninput="validateDOB(this.value)" required />
                            <label for="meet_date">Meet Date<span style="color:red"> *</span></label>
                            <span id="dob-error" style="color: red; font-size: small;"></span>
                        </div>
                    </div>

                    @*<div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="date" id="roc_date" name="roc_date" oninput="validateDOB(this.value)" required />
                            <label for="roc_date">ROC Date </label>
                            <span id="dob-error" style="color: red; font-size: small;"></span>
                        </div>
                    </div>*@

                </div>


                <!-- Fourth Row -->
                @*<div class="row" style="padding-bottom: 5px;">



                    <div class="col-md-6 col-lg-2">
                        <div class="input-container">
                            <input type="date" id="trust_date" name="trust_date" oninput="validateDOB(this.value)" required />
                            <label for="trust_date">Trust Date </label>
                            <span id="dob-error" style="color: red; font-size: small;"></span>
                        </div>
                    </div>
                </div>*@
                <br />
                @*///////////////////////////////// Canvasser Registration   //////////////////////////////////////////*@

                <div class="row" style="padding-bottom: 5px;">
                    <div class="col-lg-6" id="canvasser_div" style="display: none;">
                        <div class=" mb-3 card" style="background-color: #f3f3f3">
                            <div class="card-body" style="background-color: #f3f3f3">
                                <h5 class="card-title" style="color:maroon;font-size:16px;padding-left:105px;">Canvasser Commission</h5>

                                <!-- Input fields for adding new canvasser commission -->
                                <div class="mb-2 row">
                                    <div class="col-md-6 col-lg-4">
                                        <div class="input-container">
                                            <input type="text" id="tempamtupto" name="tempamtupto" class="form-control" style="background-color: #f3f3f3;" oninput="this.value = this.value.replace(/[^0-9.]/g, ''); " pattern="\d+(\.\d{1,2})?"/>
                                            <label for="amtupto" style="background-color: #f3f3f3;">Amount Up To<span style="color:red"> *</span></label>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-lg-4">
                                        <div class="input-container">
                                            <input type="text" id="tempcnvsrcmsn" name="tempcnvsrcmsn" class="form-control" style="background-color: #f3f3f3;" maxlength="2" oninput="this.value = this.value.replace(/[^0-9.]/g, '').substring(0, 2); " pattern="\d+(\.\d{1,2})?" />
                                            <label for="cnvsrcmsn" style="background-color: #f3f3f3;">Cnvsr Cmsn (%)<span style="color:red"> *</span></label>
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-lg-2">
                                        <button type="button" class="btn btn-primary btn-small" id="addCommissionBtn" style="height: 25px;">Add</button>
                                    </div>
                                </div>

                                <!-- Table structure for displaying added canvasser commission rows -->
                                <table class="mb-0 table table-hover" id="commissionTable" style="font-size: 14px; line-height: 1.2;">
                                    <thead>

                                    </thead>
                                    <tbody>
                                        <!-- New rows will be displayed here dynamically -->
                                    </tbody>
                                </table>

                                <!-- Hidden field to store the commission data -->
                                <input type="hidden" id="hcnvsrcmsn" name="canvasser_commission_data" />


                            </div>
                        </div>
                    </div>
                </div>

                @*///////////////////////////////// Submit & reset buttons   //////////////////////////////////////////*@


                <div class="row d-block text-center" style="padding-bottom: 5px;">

                    @*<div class="col-md-6 col-lg-4"></div>

            <div class="col-md-6 col-lg-4">*@
                    <button type="submit" class="btn btn-success " id="submitbutton" style="height: 38px;">SUBMIT</button> <!-- Button height adjusted -->
                    @*</div>
            <div class="col-md-6 col-lg-4">*@

                    &nbsp;
                    &nbsp;
                    &nbsp;
                    &nbsp;
                    <button type="button" id="resetbutton" class="btn btn-gradient-secondary" style="height: 38px;">RESET</button>

                </div>
                <script>

                    ///////////////////////    initial //////////////////////////////////////////


                    $(document).ready(function () {
                        $('#canvasser_div').hide();

                        total_deb();
                        toggleCanvasserDiv();


                        /////////////////////// locking period ////////////////////////////

                        // Make the locking period field readonly
                        $('#locking_period').prop('readonly', true);

                        // Function to update the locking period based on the period input
                        window.updateLockingPeriod = function () {
                            // Get the value of the period input
                            var periodValue = $('#period').val();

                            // Set the value of the locking period input to the period value
                            $('#locking_period').val(periodValue);
                        };


                        ///////////////////////// // On radio button change        //////////////////////////
                            
                        $('input[name="interest_type"]').change(function () {
                            alert("interest_type");
                                var selectedValue = $('input[name="interest_type"]:checked').val();

                                // Case 1: When "Month" is selected
                                if (selectedValue === 'F') {
                                    $('#interest_rate_cmltv').prop('readonly', true).removeAttr('required').css('background-color', '#f0f0f0');
                                    $('#interest_rate_fixed').prop('readonly', false).attr('required', true).css('background-color', '');
                                }
                                // Case 2: When "Cumulative" is selected
                                else if (selectedValue === 'C') {
                                    $('#interest_rate_fixed').prop('readonly', true).removeAttr('required').css('background-color', '#f0f0f0');
                                    $('#interest_rate_cmltv').prop('readonly', false).attr('required', true).css('background-color', '');
                                }
                                // Case 3: When "Both" is selected
                                else if (selectedValue === 'B') {
                                    $('#interest_rate_fixed').prop('readonly', false).attr('required', true).css('background-color', '');
                                    $('#interest_rate_cmltv').prop('readonly', false).attr('required', true).css('background-color', '');
                                }
                            });
                      





                        /////////////////////////////  Disable the interest field by default  ////////////////////////////////////

                        $('#senior_citizen_interest').prop('readonly', true).css('background-color', '#f0f0f0');


                        // Handle the change event on the radio buttons
                        $('input[name="senior_citizen"]').change(function () {
                            if ($('#senior_citizen_yes').is(':checked')) {
                                // Make the interest field editable and required when "Yes" is selected
                                $('#senior_citizen_interest').prop('readonly', false).css('background-color', '');
                                $('#senior_citizen_interest').attr('required', true);
                            } else if ($('#senior_citizen_no').is(':checked')) {
                                // Make the interest field readonly and remove the required attribute when "No" is selected
                                $('#senior_citizen_interest').prop('readonly', true).css('background-color', '#f0f0f0');
                                $('#senior_citizen_interest').removeAttr('required');
                                // Optionally, clear the input value
                                $('#senior_citizen_interest').val('');
                            }
                        });


                    });


                    ////////////// no.of debentures testing  ///////////////////////


                    function total_deb() {
                        /* alert("total_deb");*/
                        var faceValue = parseFloat(document.getElementById("face_value").value);
                        var totalFund = parseFloat(document.getElementById("total_fund").value);

                        if (isNaN(faceValue) || faceValue <= 0) {
                            //alert("Please Enter a valid Face Value");
                            document.getElementById("number_of_debentures").value = "";
                            return false;
                        }

                        if (isNaN(totalFund) || totalFund <= 0) {
                            //alert("Please Enter a valid Total Fund");
                            document.getElementById("number_of_debentures").value = "";
                            return false;
                        }

                        var numberOfDebentures = totalFund / faceValue;
                        //    document.getElementById("number_of_debentures").value = numberOfDebentures.toFixed(2); // Optional, rounds to 2 decimal places
                        document.getElementById("number_of_debentures").value = numberOfDebentures; // Optional, rounds to 2 decimal places

                    }

                    ////////////// compare min amt with total fund  ///////////////////////


                    // Function to validate that the minimum amount is less than the total fund
                    function validateMinAmount() {
                        //alert("validateMinAmount");
                        const totalFund = parseFloat(document.getElementById("total_fund").value);
                        const minAmount = parseFloat(document.getElementById("min_amount").value);

                        // Check if both values are valid numbers before comparison
                        if (!isNaN(totalFund) && !isNaN(minAmount) && minAmount >= totalFund) {
                            alert("Minimum amount must be less than the total fund.");
                            document.getElementById("min_amount").value = ""; // Clear the input if the condition is not met
                        }
                    }


                 



                    //////////////  convert numbers to words  ///////////////////////


                    function numberToWords(num) {
                        const words = [
                            '',
                            'One',
                            'Two',
                            'Three',
                            'Four',
                            'Five',
                            'Six',
                            'Seven',
                            'Eight',
                            'Nine',
                            'Ten',
                            'Eleven',
                            'Twelve',
                            'Thirteen',
                            'Fourteen',
                            'Fifteen',
                            'Sixteen',
                            'Seventeen',
                            'Eighteen',
                            'Nineteen',
                            'Twenty',
                            'Thirty',
                            'Forty',
                            'Fifty',
                            'Sixty',
                            'Seventy',
                            'Eighty',
                            'Ninety'
                        ];

                        if (num === 0) return 'Zero';

                        let result = '';

                        function getBelowThousand(n) {
                            let str = '';

                            if (n > 99) {
                                str += words[Math.floor(n / 100)] + ' Hundred ';
                                n = n % 100;
                            }

                            if (n > 20) {
                                str += words[20 + Math.floor(n / 10) - 2] + ' ';
                                n = n % 10;
                            }

                            if (n > 0) {
                                str += words[n] + ' ';
                            }

                            return str.trim();
                        }

                        if (num >= 10000000) {
                            result += getBelowThousand(Math.floor(num / 10000000)) + ' Crore ';
                            num = num % 10000000;
                        }

                        if (num >= 100000) {
                            result += getBelowThousand(Math.floor(num / 100000)) + ' Lakh ';
                            num = num % 100000;
                        }

                        if (num >= 1000) {
                            result += getBelowThousand(Math.floor(num / 1000)) + ' Thousand ';
                            num = num % 1000;
                        }

                        if (num > 0) {
                            result += getBelowThousand(num);
                        }

                        return result.trim();
                    }


                    /////////////////// show amounts in words ///////////////////

                    // Function to show amounts in words
                    function showAmountInWords(inputId, displayId) {
                        const amount = parseFloat(document.getElementById(inputId).value);
                        if (!isNaN(amount)) {
                            document.getElementById(displayId).innerText = numberToWords(amount);
                            document.getElementById(displayId).style.display = 'inline'; // Show the text
                        }
                    }


                    /////////////////// hide  amounts in words ///////////////////


                    // Function to hide amounts in words
                    function hideAmountInWords(displayId) {
                        document.getElementById(displayId).style.display = 'none'; // Hide the text
                    }

                    /////////////////////////////// canvasser div  shows when choose  "Yes" radio button     //////////////////////////////


                    // Function to toggle canvasser div based on radio button selection
                    function toggleCanvasserDiv() {
                        if ($('#canvasser_commission_yes').is(':checked')) {
                            $('#canvasser_div').show(); // Show canvasser div when "Yes" is selected
                        } else {
                            $('#canvasser_div').hide(); // Hide canvasser div when "No" is selected
                        }
                    }

                    // Attach the change event to the canvasser radio buttons
                    $('input[name="canvasser_commission"]').change(function () {
                        toggleCanvasserDiv();
                    });





                    ///////////////////////////////////////  add canvasser commission ////////////////// /////////////////////////////////////////////////////////




                    let commissionCount = 0;  // To keep track of the row count

                    // Function to add a new row to the table
                    document.getElementById("addCommissionBtn").addEventListener("click", function () {
                        // Get the values from the input fields
                        const amountUptoField = document.getElementById("tempamtupto");
                        const commissionField = document.getElementById("tempcnvsrcmsn");
                        const totalFundField = document.getElementById("total_fund");
                        const minimumAmountField = document.getElementById("min_amount"); // Ensure this field is defined in your HTML

                        const amountUpto = parseFloat(amountUptoField.value);
                        const commission = parseFloat(commissionField.value);
                        const totalFund = parseFloat(totalFundField.value);
                        const minimumAmount = parseFloat(minimumAmountField.value);

                        // Validate input fields
                        if (isNaN(amountUpto) || isNaN(commission) || isNaN(totalFund) || isNaN(minimumAmount)) {
                            alert("Please fill in all fields correctly.");
                            amountUptoField.focus(); // Focus on the first invalid input
                            return; // Exit the function if validation fails
                        }

                        // Validation for amountUpto to be within the range [minimumAmount, totalFund]
                        if (amountUpto < minimumAmount || amountUpto > totalFund) {
                            alert(`Enter the amount between ${minimumAmount} and ${totalFund}.`);
                            amountUptoField.focus(); // Focus on the invalid field
                            return; // Exit the function if validation fails
                        }

                        // If validation passes, proceed to add the row
                        commissionCount++;  // Increment row count for unique ID

                        // Get the table body where new rows will be inserted
                        const tableBody = document.querySelector("#commissionTable tbody");

                        // Create a new row with the entered data
                        const newRow = `
                                                                        <tr>
                                                                            <th scope="row">${commissionCount}</th>
                                                                            <td>${amountUpto}</td>
                                                                            <td>${commission}</td>
                                                                            <td>
                                                                                <button class="btn btn-danger btn-small" onclick="removeCommission(this)">Remove</button>
                                                                            </td>
                                                                        </tr>
                                                                    `;

                        // Insert the new row into the table
                        tableBody.insertAdjacentHTML('beforeend', newRow);

                        // Clear the input fields for the next entry
                        amountUptoField.value = "";
                        commissionField.value = "";

                        // Update hidden field with the new data
                        updateCommissionData();
                    });

                    // Function to remove a commission row
                    function removeCommission(button) {
                        // Remove the row containing the button that was clicked
                        const row = button.parentElement.parentElement;
                        row.remove();

                        // Reorder the # column after removal to maintain sequence
                        reorderCommissionRows();

                        // Update hidden field after removing data
                        updateCommissionData();
                    }

                    // Function to reorder commission row numbers
                    function reorderCommissionRows() {
                        const rows = document.querySelectorAll("#commissionTable tbody tr");
                        rows.forEach((row, index) => {
                            row.querySelector("th").innerText = index + 1;  // Re-number the row
                        });
                    }

                    // Function to collect and update commission data in the hidden field
                    function updateCommissionData() {
                        const table = document.querySelector("#commissionTable tbody");
                        let commissionData = "";

                        // Loop through each row and collect commission details
                        for (let i = 0; i < table.rows.length; i++) {
                            const amountUpto = table.rows[i].cells[1].innerText;
                            const commission = table.rows[i].cells[2].innerText;

                            // Build the commission data string
                            if (commissionData === "") {
                                commissionData = amountUpto + "*" + commission;
                            } else {
                                commissionData += "$" + amountUpto + "*" + commission;
                            }
                        }

                        // Set the collected data to the hidden field
                        document.getElementById("hcnvsrcmsn").value = commissionData;
                        //    alert(commissionData);
                    }

                    /////////////////// reset button click  ///////////////////

                    document.getElementById("resetbutton").addEventListener("click", function () {

                        /*alert(" reset button click");*/
                        // Get the form containing the fields you want to reset
                        const form = document.querySelector("form");  // Assuming the fields are inside a form tag

                        // Clear all form fields (reset to default values)
                        form.reset();

                        // Optionally, clear error messages or any dynamically updated UI elements
                        document.getElementById("PANNumberError").textContent = "";  // Clear the PAN error message
                        document.getElementById("date-error").textContent = "";  // Clear the PAN error message
                    });

                    /////////////////// issue start and issue end  ///////////////////


                    function validateDateRange() {
                        //alert(" validateDateRange  click");
                        // Get the values of the start and end dates
                        const startDate = document.getElementById("issue_start").value;
                        const endDate = document.getElementById("issue_end").value;

                        // Get the element to display the error message
                        const errorMessage = document.getElementById("date-error");

                        // Only validate if both dates have been selected
                        if (startDate && endDate) {
                            // Compare the dates
                            if (new Date(startDate) > new Date(endDate)) {
                                // Display an error message if the start date is greater than the end date
                                errorMessage.textContent = "Invalid date range!";

                            } else {
                                // Clear the error message if the validation passes
                                errorMessage.textContent = "";
                            }
                        } else {
                            // Clear the error message if one of the fields is empty
                            errorMessage.textContent = "";
                        }
                    }



                    /////////////////// submit button click  ///////////////////




                    $(document).ready(function () {
                        $('#submitbutton').click(function (e) {
                            // Prevent form submission initially
                            e.preventDefault();


                            // Check if the form is valid first (HTML5 required fields)
                            if (!$('#SubmitSchemeRegistration')[0].checkValidity()) {
                                // If not valid, show the default validation messages
                                $('#SubmitSchemeRegistration')[0].reportValidity();
                                return; // Stop submission
                            }




                            // Check trustee hidden field

                            var canvasserCommission = $('input[name="canvasser_commission"]:checked').val();
                            var canvasserData = $('#hcnvsrcmsn').val();



                            // Validate Canvasser Commission
                            if (canvasserCommission === "Y" && (canvasserData.trim() === "")) {
                                alert("Canvasser Commission data is empty. Please provide the data.");
                                return; // Stop submission
                            }



                            // If all validations pass, submit the form
                            $('#SubmitSchemeRegistration').submit();
                        });
                    });




                </script>


                <style>


                    .btn-small {
                        height: 25px; /* Reduced height */
                        font-size: 12px; /* Reduced font size */
                        padding: 0 10px; /* Adjusted padding for better appearance */
                        line-height: 1.2; /* Adjust line height to match button size */
                    }
                </style>










            </form>







            </div>

        @*</div>
    </div>*@



</body>
</html>

