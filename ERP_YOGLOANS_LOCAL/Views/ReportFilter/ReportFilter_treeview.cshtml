
@using System.Data

@model List<ERP_YOGLOANS_LOCAL.Models.report_filter_model>

@{
    ViewBag.Title = "Filter_treeview";
    Layout = null;
}



<style>
    #tree_report ul {
        list-style-type: none;
        padding-left: 20px; /* Indentation for child nodes */
    }

    #tree_report li {
        margin: 1px 0; /* Space between items */
    }

    #tree_report input[type="checkbox"] {
        margin-right: 5px; /* Space between checkbox and label */
    }

    .toggle-icon {
        cursor: pointer; /* Change cursor to pointer */
        display: inline-block; /* Allow spacing */
        margin-right: 5px; /* Space between icon and label */
    }


    .icon-size {
        font-size: 19px; /* Change this value to your desired font size */
        /*color: #f8d775;*/
        color: #DEB82D;
    }
</style>




<div id="tree_report" style="height: 150px; overflow-y: auto;font-size:11px;">
    <p style="font-size:13px;color:maroon"> Filter:</p>
    @Html.Raw(BuildTree((DataTable)ViewBag.TreeReportItems, null, new HashSet<string>()))

</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


@*<script>
    $(document).ready(function () {
        // Hide all child lists initially
        $('#tree_report ul ul').hide();

        // Click event for toggle icons
        $('.toggle-icon').click(function () {
            alert("tree click");
            var $children = $(this).siblings('ul');
            $children.toggle(); // Toggle visibility of child nodes

            // Change the icon based on the visibility
            var $icon = $(this).find('i');
            $icon.toggleClass('fa-caret-right fa-caret-down'); // Change to down arrow if visible, right arrow if hidden
        });

        // Checkbox click handling
        $('input[type="checkbox"]').click(function () {
            alert("checkbox click");
            var $checkbox = $(this);
            var isChecked = $checkbox.is(':checked');
            var $children = $checkbox.closest('li').find('ul input[type="checkbox"]');

            // Check/uncheck all children based on the parent checkbox
            $children.prop('checked', isChecked);

            // Update parent checkbox state based on child checkboxes
            $children.change(function () {
                var $siblings = $checkbox.closest('li').siblings().find('input[type="checkbox"]');
                $checkbox.prop('checked', $children.length === $children.filter(':checked').length);
            });

            // Call function to collect checked values on checkbox click
            collectCheckedValues();
        });

        // Function to collect checked values
        function collectCheckedValues() {
            var checkedValues = [];
            $('input[type="checkbox"]:checked').each(function () {
                checkedValues.push($(this).attr('id'));
            });

            // Send the checked values to the server
            $.post('/ReportFilter/GetCheckedValues', { checkedValues: checkedValues.join(',') }, function (response) {
                if (response.success) {
                    console.log('Checked values:', response.checkedValues);
                }
            });
        }

        // Call the function to collect checked values when the page loads
        collectCheckedValues();
    });

</script>*@




<script>
    $(document).ready(function () {
        // Hide all child lists initially
        $('#tree_report ul ul').hide();

        // Click event for toggle icons
        $('.toggle-icon').click(function () {
            var $children = $(this).siblings('ul');
            $children.toggle(); // Toggle visibility of child nodes

            // Change the icon based on the visibility
            var $icon = $(this).find('i');
            $icon.toggleClass('fa-caret-right fa-caret-down'); // Change to down arrow if visible, right arrow if hidden
        });

        // Checkbox click handling
        $('input[type="checkbox"]').click(function () {
            var $checkbox = $(this);
            var isChecked = $checkbox.is(':checked');
            var $children = $checkbox.closest('li').find('ul input[type="checkbox"]');

            // Check/uncheck all children based on the parent checkbox
            $children.prop('checked', isChecked);

            // Update all parent checkboxes based on child checkboxes
            updateParentCheckboxes($checkbox);

            // Call function to collect checked values on checkbox click
            collectCheckedValues();
        });

        // Function to update parent checkboxes based on child checkboxes
        function updateParentCheckboxes($checkbox) {
            var $parentLi = $checkbox.closest('ul').closest('li');
            if ($parentLi.length) {
                var $parentCheckbox = $parentLi.children('input[type="checkbox"]');
                var $siblings = $parentLi.find('ul input[type="checkbox"]');

                // Update parent checkbox state based on its children's state
                var allChecked = $siblings.filter(':checked').length === $siblings.length;
                var anyChecked = $siblings.filter(':checked').length > 0;

                $parentCheckbox.prop('checked', allChecked).prop('indeterminate', !allChecked && anyChecked);

                // Recursively update higher-level parent checkboxes
                updateParentCheckboxes($parentCheckbox);
            }
        }

        // Function to collect checked values
        function collectCheckedValues() {
            var checkedValues = [];
            $('input[type="checkbox"]:checked').each(function () {
                checkedValues.push($(this).attr('id'));
            });

            // Send the checked values to the server
            $.post('/ReportFilter/GetCheckedValues', { checkedValues: checkedValues.join(',') }, function (response) {
                if (response.success) {
                    console.log('Checked values:', response.checkedValues);
                }
            });
        }

        // Call the function to collect checked values when the page loads
        collectCheckedValues();
    });

</script>


@functions {


    public string BuildTree(DataTable items, string parentId, HashSet<string> visitedIds)
    {
        var result = "<ul>";
        var nodes = string.IsNullOrEmpty(parentId)
            ? items.Select("parent_id IS NULL")
            : items.Select($"parent_id = '{parentId}'");
        if (!nodes.Any())
        {
            nodes = items.Select($"parent_id IS NOT NULL"); // Get all leaf nodes
        }

        foreach (var row in nodes)
        {
            var categoryId = row["category_id"].ToString();
            var menuName = row["menu_name"].ToString();
            if (visitedIds.Contains(categoryId))
            {
                continue; // Skip already visited nodes to prevent infinite recursion
            }
            visitedIds.Add(categoryId); // Mark this ID as visited
            var hasChildren = items.Select($"parent_id = '{categoryId}'").Any();
            var iconClass = hasChildren ? "fas fa-folder-open" : "fas fa-file";
            result += $"<li><span class='toggle-icon'><i class='{iconClass} icon-size'></i></span>" +
                      $"<input type='checkbox' id='{categoryId}' checked />" + // Set checkbox as checked
                      $"<label for='{categoryId}'>{menuName}</label>";
            if (hasChildren)
            {
                var children = BuildTree(items, categoryId, visitedIds);
                if (!string.IsNullOrEmpty(children))
                {
                    result += children;
                }
            }
            result += "</li>";
        }
        result += "</ul>";
        return result;
    }


}




@*//////////////////////////////////////////////////////////////////////////*@

